From 18b47d781d631667a40a543383cf2510968440e3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Johann=20Kl=C3=A4hn?= <johann@jklaehn.de>
Date: Fri, 3 Nov 2017 11:17:59 +0100
Subject: [PATCH 2/5] [libclang] Add support for obtaining fully qualified
 names of types

This patch allows retrieving the fully qualified names of types
through libclang and clang.cindex (Python).
---
 bindings/python/clang/cindex.py             | 13 ++++++++++++
 bindings/python/tests/cindex/test_cursor.py |  8 ++++++++
 include/clang-c/Index.h                     |  8 ++++++++
 tools/libclang/CMakeLists.txt               |  1 +
 tools/libclang/CXType.cpp                   | 22 +++++++++++++++++++++
 tools/libclang/libclang.exports             |  1 +
 6 files changed, 53 insertions(+)

diff --git a/bindings/python/clang/cindex.py b/bindings/python/clang/cindex.py
index 56fcc78763..becf745040 100644
--- a/bindings/python/clang/cindex.py
+++ b/bindings/python/clang/cindex.py
@@ -2401,6 +2401,14 @@ class Type(Structure):
         """Retrieve the spelling of this Type."""
         return conf.lib.clang_getTypeSpelling(self)
 
+    @property
+    def fully_qualified_name(self):
+        """Retrieve the fully qualified name of this Type."""
+        if not hasattr(self, '_fully_qualified_name'):
+            self._fully_qualified_name = conf.lib.clang_getFullyQualifiedTypeName(self)
+
+        return self._fully_qualified_name
+
     def __eq__(self, other):
         if type(other) != type(self):
             return False
@@ -3847,6 +3855,11 @@ functionList = [
    _CXString,
    _CXString.from_result),
 
+  ("clang_getFullyQualifiedTypeName",
+   [Type],
+   _CXString,
+   _CXString.from_result),
+
   ("clang_hashCursor",
    [Cursor],
    c_uint),
diff --git a/bindings/python/tests/cindex/test_cursor.py b/bindings/python/tests/cindex/test_cursor.py
index f5733fd158..26d5f01b23 100644
--- a/bindings/python/tests/cindex/test_cursor.py
+++ b/bindings/python/tests/cindex/test_cursor.py
@@ -311,6 +311,14 @@ class TestCursor(unittest.TestCase):
         underlying = typedef.underlying_typedef_type
         self.assertEqual(underlying.kind, TypeKind.INT)
 
+    def test_fully_qualified_type_name():
+        source = 'namespace uiae { struct X { typedef int sometype; }; }'
+        tu = get_tu(source, lang='cpp')
+
+        cls = get_cursor(tu, 'sometype')
+        fqn = cls.type.fully_qualified_name
+        self.assertTrue(fqn.endswith("uiae::X::sometype"), fqn)
+
     def test_semantic_parent(self):
         tu = get_tu(kParentTest, 'cpp')
         curs = get_cursors(tu, 'f')
diff --git a/include/clang-c/Index.h b/include/clang-c/Index.h
index 65dada38b0..a9bd6f4ebf 100644
--- a/include/clang-c/Index.h
+++ b/include/clang-c/Index.h
@@ -3318,6 +3318,14 @@ CINDEX_LINKAGE CXType clang_getCursorType(CXCursor C);
  */
 CINDEX_LINKAGE CXString clang_getTypeSpelling(CXType CT);
 
+/**
+ * Retrieve the fully qualified name of the underlying type.
+ * This includes full qualification of all template parameters etc.
+ *
+ * If the type is invalid, an empty string is returned.
+ */
+CINDEX_LINKAGE CXString clang_getFullyQualifiedTypeName(CXType CT);
+
 /**
  * Retrieve the underlying type of a typedef declaration.
  *
diff --git a/tools/libclang/CMakeLists.txt b/tools/libclang/CMakeLists.txt
index e539c8308e..336a5c2e98 100644
--- a/tools/libclang/CMakeLists.txt
+++ b/tools/libclang/CMakeLists.txt
@@ -41,6 +41,7 @@ set(LIBS
   clangLex
   clangSema
   clangTooling
+  clangToolingCore
 )
 
 if (CLANG_ENABLE_ARCMT)
diff --git a/tools/libclang/CXType.cpp b/tools/libclang/CXType.cpp
index 7c0f307944..9651c3a84a 100644
--- a/tools/libclang/CXType.cpp
+++ b/tools/libclang/CXType.cpp
@@ -20,6 +20,7 @@
 #include "clang/AST/DeclObjC.h"
 #include "clang/AST/DeclTemplate.h"
 #include "clang/AST/Expr.h"
+#include "clang/AST/QualTypeNames.h"
 #include "clang/AST/Type.h"
 #include "clang/Basic/AddressSpaces.h"
 #include "clang/Frontend/ASTUnit.h"
@@ -293,6 +294,27 @@ CXString clang_getTypeSpelling(CXType CT) {
   return cxstring::createDup(OS.str());
 }
 
+CXString clang_getFullyQualifiedTypeName(CXType CT) {
+  QualType T = GetQualType(CT);
+  if (T.isNull())
+    return cxstring::createEmpty();
+
+  // For builtin types (but not typedefs pointing to builtin types) return their
+  // spelling.  Otherwise "bool" will be turned into "_Bool".
+  const Type *TP = T.getTypePtrOrNull();
+  if (TP && TP->isBuiltinType() && T->getAs<TypedefType>() == nullptr)
+    return clang_getTypeSpelling(CT);
+
+  CXTranslationUnit TU = GetTU(CT);
+  ASTContext &Ctx = cxtu::getASTUnit(TU)->getASTContext();
+  PrintingPolicy Policy(Ctx.getPrintingPolicy());
+  Policy.SuppressScope = false;
+  Policy.AnonymousTagLocations = false;
+  Policy.PolishForDeclaration = true;
+  std::string name = TypeName::getFullyQualifiedName(T, Ctx, Policy, /*WithGlobalNsPrefix=*/true);
+  return cxstring::createDup(name.c_str());
+}
+
 CXType clang_getTypedefDeclUnderlyingType(CXCursor C) {
   using namespace cxcursor;
   CXTranslationUnit TU = cxcursor::getCursorTU(C);
diff --git a/tools/libclang/libclang.exports b/tools/libclang/libclang.exports
index 95a42712c4..87773b9036 100644
--- a/tools/libclang/libclang.exports
+++ b/tools/libclang/libclang.exports
@@ -230,6 +230,7 @@ clang_getFileLocation
 clang_getFileName
 clang_getFileTime
 clang_getFileUniqueID
+clang_getFullyQualifiedTypeName
 clang_getFunctionTypeCallingConv
 clang_getIBOutletCollectionType
 clang_getIncludedFile
-- 
2.18.0

